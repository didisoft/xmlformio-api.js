/**
 * XmlForm.IO API
 * XmlForm.IO API for working with web forms backed by XML data
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xmlform.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JwtLogin200Response from '../model/JwtLogin200Response';
import JwtLoginRequest from '../model/JwtLoginRequest';

/**
* Xmlform service.
* @module api/XmlformApi
* @version 1.0
*/
export default class XmlformApi {

    /**
    * Constructs a new XmlformApi. 
    * @alias module:api/XmlformApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the formToXml operation.
     * @callback module:api/XmlformApi~formToXmlCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts provided xmlform.io form data into XML document
     * Converts provided xmlform.io form data into XML document
     * @param {String} body form data submitted from xmlform.io web form
     * @param {module:api/XmlformApi~formToXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    formToXml(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling formToXml");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/xml/v1/FormToXmlV1/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jwtLogin operation.
     * @callback module:api/XmlformApi~jwtLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtLogin200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JWT Token endpoint
     * Authenticates and returns a JWT token
     * @param {module:model/JwtLoginRequest} jwtLoginRequest 
     * @param {module:api/XmlformApi~jwtLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtLogin200Response}
     */
    jwtLogin(jwtLoginRequest, callback) {
      let postBody = jwtLoginRequest;
      // verify the required parameter 'jwtLoginRequest' is set
      if (jwtLoginRequest === undefined || jwtLoginRequest === null) {
        throw new Error("Missing the required parameter 'jwtLoginRequest' when calling jwtLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JwtLogin200Response;
      return this.apiClient.callApi(
        '/jwt/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the xmlToForm operation.
     * @callback module:api/XmlformApi~xmlToFormCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts provided XML document into xmlform.io form data
     * Converts XML document into form data, ready for editing in an xmlform.io web form. #Example code Example code for various languages can be found at [Xml to Form examples](https://xmlform.io/docs/xml-to-form) 
     * @param {String} body 
     * @param {module:api/XmlformApi~xmlToFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    xmlToForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling xmlToForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/xml/v1/XmlToFormV1/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
